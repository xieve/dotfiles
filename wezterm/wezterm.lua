local wezterm = require "wezterm"
local config = wezterm.config_builder()


-- XWayland works a little better right now on Gnome
config.enable_wayland = false

-- Workaround for font rendering issue where all glyphs are rectangles
config.front_end = "WebGpu"
config.window_decorations = "RESIZE|INTEGRATED_BUTTONS"  -- does not work on Gnome currently

if wezterm.target_triple == 'x86_64-pc-windows-msvc' then
	config.default_domain = "WSL:NixOS"
	config.wsl_domains = {
		{
			name = "WSL:NixOS",
			distribution = "NixOS",
			username = "root";
			default_prog = {
				"/run/current-system/sw/bin/zsh",
				"-c",
				"until [ -S /run/dbus/system_bus_socket ]; \
					do sleep 1; \
				done; \
				systemctl restart user@1000; \
				export DBUS_SESSION_BUS_ADDRESS='unix:path=/run/user/1000/bus'; \
				exec sudo --preserve-env=DBUS_SESSION_BUS_ADDRESS --user xieve zsh",
			}
		},
	}
else
	config.window_background_opacity = 0.8

	wezterm.on("update-status", function(window)
		-- run only once per new window
		wezterm.GLOBAL.windows_without_decoration = wezterm.GLOBAL.windows_without_decoration or {}
		local window_id = window:window_id() .. ""
		wezterm.log_info("id: " .. window_id .. " has decoration: " .. tostring(not wezterm.GLOBAL.windows_without_decoration[window_id]))
		if wezterm.GLOBAL.windows_without_decoration[window_id] then return end

		-- get all current Xorg windows with their id and their window class
		local success, stdout, stderr = wezterm.run_child_process({"wmctrl", "-lx"})
		if not success then error("Error running wmctrl: " + (stderr or "")) end

		-- iterate lines
		for line in string.gmatch(stdout, "([^\n]+)") do
			-- filter by window class
			if string.find(line, "org.wezfurlong.wezterm") then
				-- set wmhints
				wezterm.run_child_process {
					"xprop",
					"-f", "_MOTIF_WM_HINTS", "32c",
					"-set", "_MOTIF_WM_HINTS", "0x2, 0x0, 0x0, 0x0, 0x0",
					"-id", string.match(line, "([^%s]+)")
				}
				wezterm.GLOBAL.windows_without_decoration[window_id] = true
			end
		end
	end)

	-- window is redrawn when config is reloaded
	wezterm.on("window-config-reloaded", function(window)
		wezterm.GLOBAL.windows_without_decoration[window:window_id() .. ""] = false
	end)
end


-- Bindings
config.keys = {
	{ key = 'UpArrow', mods = 'SHIFT', action = wezterm.action.ScrollToPrompt(-1) },
	{ key = 'DownArrow', mods = 'SHIFT', action = wezterm.action.ScrollToPrompt(1) },
}

config.mouse_bindings = {
	{
		event = { Down = { streak = 3, button = 'Left' } },
		action = wezterm.action.SelectTextAtMouseCursor 'SemanticZone',
		mods = 'NONE',
	},
}


-- Theming
config.font = wezterm.font {
	family = "FiraCode Nerd Font",
	weight = "Medium",
}
--config.integrated_title_button_style = "Gnome"

-- get color scheme generated by flavours
-- the base16 template was modified to include all colors in the theme (scheme.brights[2:7])
local scheme = wezterm.color.load_scheme(wezterm.config_dir .. "/colors/flavours.toml")

-- we use some of these colors here
scheme.tab_bar = {
	inactive_tab_edge = scheme.brights[5],
	active_tab = {
		bg_color = scheme.background,
		fg_color = scheme.brights[8],
	},
	inactive_tab = {
		bg_color = scheme.brights[3],
		fg_color = scheme.ansi[8],
		intensity = "Half",
	},
}

config.window_frame = {
	active_titlebar_bg = scheme.brights[4],
	inactive_titlebar_bg = scheme.brights[4],
}

scheme.tab_bar.new_tab = {
	bg_color = config.window_frame.active_titlebar_bg,
	fg_color = scheme.tab_bar.inactive_tab.fg_color,
}

scheme.compose_cursor = scheme.brights[2]

-- then we override them with lightened versions of the ansi colors to make bright text legible
for i, color in ipairs(scheme.ansi) do
	if i > 2 and i < 8 then
		scheme.brights[i] = wezterm.color.parse(color):lighten(0.3)
	end
end

config.colors = scheme


return config
